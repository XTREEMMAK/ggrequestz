name: Test Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:unit

      - name: Generate coverage report
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ggrequestz_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Setup test environment
        run: |
          cp .env.example .env
          echo "POSTGRES_HOST=localhost" >> .env
          echo "POSTGRES_PORT=5432" >> .env
          echo "POSTGRES_DB=ggrequestz_test" >> .env
          echo "POSTGRES_USER=postgres" >> .env
          echo "POSTGRES_PASSWORD=test_password" >> .env
          echo "SESSION_SECRET=test_session_secret_for_github_actions_32_chars" >> .env
          echo "IGDB_CLIENT_ID=test_client_id" >> .env
          echo "IGDB_CLIENT_SECRET=test_client_secret" >> .env
          echo "AUTH_METHOD=basic" >> .env
          echo "NODE_ENV=test" >> .env

      - name: Clear database and run migrations
        run: |
          # Clear any existing data and reset migrations
          PGPASSWORD=test_password psql -h localhost -U postgres -d ggrequestz_test -c "DROP SCHEMA IF EXISTS public CASCADE; CREATE SCHEMA public; GRANT ALL ON SCHEMA public TO postgres; GRANT ALL ON SCHEMA public TO public;"
          # Remove .env file temporarily to prevent dotenv override
          mv .env .env.backup || true
          # Run migrations with environment variables
          node scripts/database/db-manager.js migrate
          # Restore .env file
          mv .env.backup .env || true
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: ggrequestz_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: test_password

      - name: Build application
        run: npm run build

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          CI: true

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  lint-and-check:
    name: Lint and Type Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run Prettier check
        run: npm run lint

      - name: Run Svelte check
        run: npm run check
